# TODO This model is ONLY designed for EOG classification
# do not seperately take 5 stages classification into consideration
import pickle
from time import time
import lightgbm as lgb
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import average_precision_score
from sklearn.metrics import log_loss
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn import svm

'''
Test the process of data by using ML method
author: 112020333002191
date: 20/8/18
'''
x, y, _ = pickle.load(open('20min_data.npy', 'rb'))
x = x[:, :8]  # Take EEG
df = pd.DataFrame(x)
df['y'] = y
#df.to_csv('./model_v2.csv', index=False)

X_train, X_test, y_train, y_test = train_test_split(
    x, y, test_size=0.1, random_state=999)
X_train, X_valid, y_train, y_valid = train_test_split(
    X_train, y_train, test_size=0.2, random_state=999)


models = [svm.SVC(kernel='rbf', probability=True),
          RandomForestClassifier(n_estimators=300),
          lgb.LGBMClassifier(learning_rate=3e-3, n_estimators=5000)]

name_models = ["SVM",
               "Random Forest",
               "LightGBM"]

eval_metrics = pd.DataFrame(np.empty([len(models) + 1, 4]))
eval_metrics.index = ["baseline"] + name_models
eval_metrics.columns = ["Accuracy", "ROC AUC", "PR AUC", "Log Loss"]

pred = np.repeat(0, len(y_test))
pred_proba = np.repeat(0.5, len(y_test))
eval_metrics.iloc[0, 0] = accuracy_score(y_test, pred)
eval_metrics.iloc[0, 1] = roc_auc_score(y_test, pred_proba)
eval_metrics.iloc[0, 2] = average_precision_score(y_test, pred_proba)
eval_metrics.iloc[0, 3] = log_loss(y_test, pred_proba)
for i, model in enumerate(models):
    tic = time()
    model.fit(X_train, y_train)
    pred = model.predict(X_test)
    pred_proba = model.predict_proba(X_test)
    eval_metrics.iloc[i + 1, 0] = accuracy_score(y_test, pred)
    eval_metrics.iloc[i + 1, 1] = roc_auc_score(y_test, pred_proba[:, 1])
    eval_metrics.iloc[i + 1,
                      2] = average_precision_score(y_test, pred_proba[:, 1])
    eval_metrics.iloc[i + 1, 3] = log_loss(y_test, pred_proba[:, 1])
    print(
        name_models[i] + " took {} seconds to run and predict.".format(round(time() - tic, 3)))
print(eval_metrics)
